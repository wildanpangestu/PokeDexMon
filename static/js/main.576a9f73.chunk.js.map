{"version":3,"sources":["components/pokemon/spinner.gif","img/background.jpg","components/layout/NavBar.js","components/pokemon/PokemonCard.js","components/pokemon/PokemonList.js","components/layout/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","Component","Thumbnail","styled","img","Card","div","PokemonCard","state","name","imageUrl","pokemonIndex","imageLoading","overloadRequest","this","props","url","split","length","number","str","pad","setState","src","spinner","style","width","height","onLoad","onError","display","toLowerCase","map","letter","charAt","toUpperCase","substring","join","PokemonList","pokemon","axios","get","res","data","Fragment","key","Dashboard","App","backgroundImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,8LCGtBC,G,mLAEjB,OACE,6BACE,yBAAKC,UAAU,yDACb,uBAAGA,UAAU,0DAAb,oB,GAL0BC,c,qmBCGpC,IAAMC,EAAYC,IAAOC,IAAV,KAKTC,EAAOF,IAAOG,IAAV,KAcWC,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,SAAU,GACVC,aAAc,GACdC,cAAc,EACdC,iBAAiB,G,kEAGE,IAAD,EACIC,KAAKC,MAAnBN,EADU,EACVA,KAAMO,EADI,EACJA,IACRL,EAAeK,EAAIC,MAAM,KAAKD,EAAIC,MAAM,KAAKC,OAAS,GAEtDR,EAAQ,0FAYd,SAAaS,EAAQD,GACnB,IAAIE,EAAM,GAAKD,EACf,KAAOC,EAAIF,OAASA,GAClBE,EAAM,IAAMA,EAEd,OAAOA,EAjB2FC,CAClGV,EACA,GAFY,iBAMdG,KAAKQ,SAAS,CACZb,OACAC,WACAC,mB,+BAYM,IAAD,OACP,OACE,yBAAKX,UAAU,0BACb,kBAACK,EAAD,CAAML,UAAU,QACd,wBAAIA,UAAU,eAAec,KAAKN,MAAMG,cACvCG,KAAKN,MAAMI,aACV,yBACEW,IAAKC,IACLC,MAAO,CAAEC,MAAO,MAAOC,OAAQ,OAC/B3B,UAAU,8CAEV,KACJ,kBAACE,EAAD,CACEF,UAAU,oCACV4B,OAAQ,kBAAM,EAAKN,SAAS,CAAEV,cAAc,KAC5CiB,QAAS,kBAAM,EAAKP,SAAS,CAAET,iBAAiB,KAChDU,IAAKT,KAAKN,MAAME,SAChBe,MACEX,KAAKN,MAAMK,gBACP,CAAEiB,QAAS,QACXhB,KAAKN,MAAMI,aACX,KACA,CAAEkB,QAAS,WAGlBhB,KAAKN,MAAMK,gBACV,wBAAIb,UAAU,WACZ,0BAAMA,UAAU,2BAAhB,2BAIA,KACJ,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,eACXc,KAAKN,MAAMC,KACTsB,cACAd,MAAM,KACNe,KACC,SAACC,GAAD,OACEA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,UAAU,MAErDC,KAAK,a,GA3EmBpC,a,iBCrBpBqC,E,4MACnB9B,MAAQ,CACNQ,IAAK,qCACLuB,QAAS,M,kMAISC,IAAMC,IAAI3B,KAAKN,MAAMQ,K,OAAjC0B,E,OACN5B,KAAKQ,SAAS,CAAEiB,QAASG,EAAIC,KAAJ,U,qIAIzB,OACE,kBAAC,IAAMC,SAAP,KACG9B,KAAKN,MAAM+B,QACV,yBAAKvC,UAAU,OACZc,KAAKN,MAAM+B,QAAQP,KAAI,SAACO,GAAD,OACtB,kBAAC,EAAD,CACEM,IAAKN,EAAQ9B,KACbA,KAAM8B,EAAQ9B,KACdO,IAAKuB,EAAQvB,UAKnB,+C,GAzB+Bf,aCDpB6C,E,uKAEjB,OACE,yBAAK9C,UAAU,OACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,Y,GAL6BC,a,iBCoBxB8C,E,uKAdX,OACE,yBACE/C,UAAU,MACVyB,MAAO,CAAEuB,gBAAgB,OAAD,OAASA,IAAT,OAExB,kBAAC,EAAD,MACA,yBAAKhD,UAAU,aACb,kBAAC,EAAD,Y,GATQC,aCKEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.576a9f73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.796c0622.gif\";","module.exports = __webpack_public_path__ + \"static/media/background.4f90fdbf.jpg\";","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\r\n          <a className=\"navbar-brand col-sm-3 col-md-2 mr-0 align-items-center\">\r\n            PokeDexMon\r\n          </a>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable react/style-prop-object */\r\n/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport spinner from \"../pokemon/spinner.gif\";\r\n\r\nconst Thumbnail = styled.img`\r\n  width: 5em;\r\n  height: 5em;\r\n`;\r\n\r\nconst Card = styled.div`\r\n  opacity: 0.95;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\r\n  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\r\n  &:hover {\r\n    box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n  }\r\n  -moz-user-select: none;\r\n  -website-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  -o-user-select: none;\r\n`;\r\n\r\nexport default class PokemonCard extends Component {\r\n  state = {\r\n    name: \"\",\r\n    imageUrl: \"\",\r\n    pokemonIndex: \"\",\r\n    imageLoading: true,\r\n    overloadRequest: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { name, url } = this.props;\r\n    const pokemonIndex = url.split(\"/\")[url.split(\"/\").length - 2];\r\n    // console.log(pokemonIndex);\r\n    const imageUrl = `https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/thumbnails/${pad(\r\n      pokemonIndex,\r\n      3\r\n    )}.png?raw=true`;\r\n    // console.log(imageUrl);\r\n\r\n    this.setState({\r\n      name,\r\n      imageUrl,\r\n      pokemonIndex,\r\n    });\r\n\r\n    function pad(number, length) {\r\n      let str = \"\" + number;\r\n      while (str.length < length) {\r\n        str = \"0\" + str;\r\n      }\r\n      return str;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-md-3 col-sm-6 mb-5\">\r\n        <Card className=\"card\">\r\n          <h5 className=\"card-header\">{this.state.pokemonIndex}</h5>\r\n          {this.state.imageLoading ? (\r\n            <img\r\n              src={spinner}\r\n              style={{ width: \"5em\", height: \"5em\" }}\r\n              className=\"card-img-top rounded mx-auto d-block mt-2\"\r\n            />\r\n          ) : null}\r\n          <Thumbnail\r\n            className=\"card-img-top rounded mx-auto mt-2\"\r\n            onLoad={() => this.setState({ imageLoading: false })}\r\n            onError={() => this.setState({ overloadRequest: true })}\r\n            src={this.state.imageUrl}\r\n            style={\r\n              this.state.overloadRequest\r\n                ? { display: \"none\" }\r\n                : this.state.imageLoading\r\n                ? null\r\n                : { display: \"block\" }\r\n            }\r\n          />\r\n          {this.state.overloadRequest ? (\r\n            <h6 className=\"mx-auto\">\r\n              <span className=\"badge badge-danger mt-2\">\r\n                Overload Image Request\r\n              </span>\r\n            </h6>\r\n          ) : null}\r\n          <div className=\"card-body mx-auto\">\r\n            <h6 className=\"card-tittle\">\r\n              {this.state.name\r\n                .toLowerCase()\r\n                .split(\" \")\r\n                .map(\r\n                  (letter) =>\r\n                    letter.charAt(0).toUpperCase() + letter.substring(1)\r\n                )\r\n                .join(\" \")}\r\n            </h6>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PokemonCard from \"./PokemonCard\";\r\nimport axios from \"axios\";\r\n\r\nexport default class PokemonList extends Component {\r\n  state = {\r\n    url: \"https://pokeapi.co/api/v2/pokemon/\",\r\n    pokemon: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const res = await axios.get(this.state.url);\r\n    this.setState({ pokemon: res.data[\"results\"] });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.pokemon ? (\r\n          <div className=\"row\">\r\n            {this.state.pokemon.map((pokemon) => (\r\n              <PokemonCard\r\n                key={pokemon.name}\r\n                name={pokemon.name}\r\n                url={pokemon.url}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <h1>Loading...</h1>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PokemonList from \"../pokemon/PokemonList\";\r\n\r\nexport default class Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <PokemonList />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/layout/NavBar\";\r\nimport Dashboard from \"./components/layout/Dashboard\";\r\nimport backgroundImage from \"./img/background.jpg\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"App\"\r\n        style={{ backgroundImage: `url(${backgroundImage})` }}\r\n      >\r\n        <NavBar />\r\n        <div className=\"container\">\r\n          <Dashboard />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}